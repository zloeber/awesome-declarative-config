{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An awesome list of declaratively configured applications and engines. Introduction Understanding Declarative Configuration Benefits Drawbacks Declarative Categories Qualifying For This List What Does Not Qualify The List Contribute Links Resources Badges Introduction \u00b6 This is a list of awesome application which qualify as being declaratively configured. To understand what qualifies for this list, it is important to understand what declarative actually means. Declarative programming as defined in wikipedia is; \u201ca style of building the structure and elements of computer programs\u2014that expresses the logic of a computation without describing its control flow.\u201d An operator can declare what they want and the app makes it a reality by handling all the gritty details. Truly declarative languages that must figure out several interdependencies in the correct order in a repeatable manner will often employ graph theory such as direct acycle graphs(DAGS) to achieve their desired results. For example, a common declarative infrastructure tool known as terraform will use such algorithms along with a separate \u2018state\u2019 to speed up future runs and track the current known state after the declarative manifest has processed. In theory, this allows not only to deploy repeatable infrastructure for IT projects, but also can be used to control configuration drift by making the deployment itself idempotent. At a high level, a declaratively structured workflow looks pretty simple. The declarative engine is an abstraction layer that produces a desired end state from an input manifest written in a Domain Specific Language (DSL). This is a simple but powerful approach to application configuration and deployment workflows. Understanding Declarative Configuration \u00b6 The next few sections will provide foundational knowledge of declarative configuration. Benefits \u00b6 Several benefits emerge when using declarative engines to accomplish configuration tasks. Declarative configuration is; Human readable Typically succinct Reusable Idempotent Naturally resistent to configuration skew/drift Easy to check into version control Is often naturally self-documenting Drawbacks \u00b6 There are drawbacks to this model as well. A few of these in no particular order. State management can be trickier to maneuver in some cases Upgrade of the underlying DSL schema can be a labyrinthine effort Version \u2018pinning\u2019 of configuration code becomes far more important Exclusivity of declarative configuration is almost required to reap the aforementioned benefits These drawbacks typically emerge in more complex declarative configurations. Declarative Categories \u00b6 Three broad categories of software will be considered for this list. The difference between them is a bit fuzzy but largely comes down to the target of the declarative manifests it consumes. Categories are as follows: Engines - Engines consume declarative manifests in some manner to simplify the attainment of desired state of a broad range of systems outside of the application itself. A prime example of a declarative engine would be Terraform. Applications - An application which is able to be configured declaratively or uses declarative manifests to accomplish application specific tasks. One example of a declarative application would be a Kubernetes operator. Platforms - A platform which consumes declarative manifests to configure or deploy platform specific elements. A great example of a declarative platform would be Kubernetes. Qualifying For This List \u00b6 The crux of a declarative configuration file is the manifest used to actually declare things. The input for a declarative application, platform, or engine will be one or more declarative manifests that meed the following criteria; Are human readable Follow a concrete configuration schema or language definition Ideally produces idempotent results when processed Present a reduction of overall complexity to the operator We do not include dependency graphing or other more complex mechanisms as a requirement as it is perfectly plausible to meet the above criteria without advanced pathing/convergence techniques. The manifest format is not relevant either. They need only be human readable so that one can look at a manifest and understand what the end state will be if processed. This means toml, hcl, json, ini, cuelang, and (the ever loved/hated) yaml are perfectly valid declarative configuration formats on this list . What Does Not Qualify \u00b6 Some applications that have broad industry support can be used as a means to enable declarative declaration for any number of other applications. For example, a great deal of effort has gone into modernizing applications to run on Kubernetes via helm. These helm packages come in the form of versioned \u2018charts\u2019 that can then be used by operators to express, in a declarative manner, a deployment of that application to the Kubernetes platform. These charts can mask an underlying application that is not declaratively configured very nicely in the hands of a skilled chart author. These charts are the source manifest for a declarative tool though, As such, individual helm charts are not going to be considered for this list. Rather, helm itself would be on this list as an application. The List \u00b6 The list can be viewed here or the entire document can be viewed in its published form here Contribute \u00b6 Contributions welcome! Read the contribution guidelines first. Links \u00b6 Mermaid.js online editor Resources \u00b6 Declarative configuration management Declarative Programming Opinion Article Badges \u00b6 awesome-declarative-tools","title":"Home"},{"location":"#introduction","text":"This is a list of awesome application which qualify as being declaratively configured. To understand what qualifies for this list, it is important to understand what declarative actually means. Declarative programming as defined in wikipedia is; \u201ca style of building the structure and elements of computer programs\u2014that expresses the logic of a computation without describing its control flow.\u201d An operator can declare what they want and the app makes it a reality by handling all the gritty details. Truly declarative languages that must figure out several interdependencies in the correct order in a repeatable manner will often employ graph theory such as direct acycle graphs(DAGS) to achieve their desired results. For example, a common declarative infrastructure tool known as terraform will use such algorithms along with a separate \u2018state\u2019 to speed up future runs and track the current known state after the declarative manifest has processed. In theory, this allows not only to deploy repeatable infrastructure for IT projects, but also can be used to control configuration drift by making the deployment itself idempotent. At a high level, a declaratively structured workflow looks pretty simple. The declarative engine is an abstraction layer that produces a desired end state from an input manifest written in a Domain Specific Language (DSL). This is a simple but powerful approach to application configuration and deployment workflows.","title":"Introduction"},{"location":"#understanding-declarative-configuration","text":"The next few sections will provide foundational knowledge of declarative configuration.","title":"Understanding Declarative Configuration"},{"location":"#benefits","text":"Several benefits emerge when using declarative engines to accomplish configuration tasks. Declarative configuration is; Human readable Typically succinct Reusable Idempotent Naturally resistent to configuration skew/drift Easy to check into version control Is often naturally self-documenting","title":"Benefits"},{"location":"#drawbacks","text":"There are drawbacks to this model as well. A few of these in no particular order. State management can be trickier to maneuver in some cases Upgrade of the underlying DSL schema can be a labyrinthine effort Version \u2018pinning\u2019 of configuration code becomes far more important Exclusivity of declarative configuration is almost required to reap the aforementioned benefits These drawbacks typically emerge in more complex declarative configurations.","title":"Drawbacks"},{"location":"#declarative-categories","text":"Three broad categories of software will be considered for this list. The difference between them is a bit fuzzy but largely comes down to the target of the declarative manifests it consumes. Categories are as follows: Engines - Engines consume declarative manifests in some manner to simplify the attainment of desired state of a broad range of systems outside of the application itself. A prime example of a declarative engine would be Terraform. Applications - An application which is able to be configured declaratively or uses declarative manifests to accomplish application specific tasks. One example of a declarative application would be a Kubernetes operator. Platforms - A platform which consumes declarative manifests to configure or deploy platform specific elements. A great example of a declarative platform would be Kubernetes.","title":"Declarative Categories"},{"location":"#qualifying-for-this-list","text":"The crux of a declarative configuration file is the manifest used to actually declare things. The input for a declarative application, platform, or engine will be one or more declarative manifests that meed the following criteria; Are human readable Follow a concrete configuration schema or language definition Ideally produces idempotent results when processed Present a reduction of overall complexity to the operator We do not include dependency graphing or other more complex mechanisms as a requirement as it is perfectly plausible to meet the above criteria without advanced pathing/convergence techniques. The manifest format is not relevant either. They need only be human readable so that one can look at a manifest and understand what the end state will be if processed. This means toml, hcl, json, ini, cuelang, and (the ever loved/hated) yaml are perfectly valid declarative configuration formats on this list .","title":"Qualifying For This List"},{"location":"#what-does-not-qualify","text":"Some applications that have broad industry support can be used as a means to enable declarative declaration for any number of other applications. For example, a great deal of effort has gone into modernizing applications to run on Kubernetes via helm. These helm packages come in the form of versioned \u2018charts\u2019 that can then be used by operators to express, in a declarative manner, a deployment of that application to the Kubernetes platform. These charts can mask an underlying application that is not declaratively configured very nicely in the hands of a skilled chart author. These charts are the source manifest for a declarative tool though, As such, individual helm charts are not going to be considered for this list. Rather, helm itself would be on this list as an application.","title":"What Does Not Qualify"},{"location":"#the-list","text":"The list can be viewed here or the entire document can be viewed in its published form here","title":"The List"},{"location":"#contribute","text":"Contributions welcome! Read the contribution guidelines first.","title":"Contribute"},{"location":"#links","text":"Mermaid.js online editor","title":"Links"},{"location":"#resources","text":"Declarative configuration management Declarative Programming Opinion Article","title":"Resources"},{"location":"#badges","text":"awesome-declarative-tools","title":"Badges"},{"location":"CODE-OF-CONDUCT/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at zloeber@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"CODE-OF-CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE-OF-CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE-OF-CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE-OF-CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"CODE-OF-CONDUCT/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE-OF-CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at zloeber@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership.","title":"Enforcement"},{"location":"CODE-OF-CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contribution Guidelines \u00b6 Please note that this project is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms. The process for contributing to this repo is as follows: Fork this repo Clone this repo to your local workstation Create a new branch Update list.yml to include your submission entry Optionally run make deps test to validate your entry Push your new branch with the updated list entry to Github Submit your PR for approval Development \u00b6 In addition to the PR process above you can also setup this repo\u2019s local development environment. This assumes you have Python3, make, and are using a Linux/Mac/WSL environment. Setup the local virtual environment by running make deps Build and preview the generated website with make serve (http://localhost:8000 by default) You can view additional tasks by running make without any arguments. Updating your PR \u00b6 If the maintainers notice anything that we\u2019d like changed, we\u2019ll ask you to edit your PR before we merge it. There\u2019s no need to open a new PR, just edit the existing one. If you\u2019re not sure how to do that, here is a guide on the different ways you can update your PR so that we can merge it.","title":"Contributing"},{"location":"CONTRIBUTING/#contribution-guidelines","text":"Please note that this project is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms. The process for contributing to this repo is as follows: Fork this repo Clone this repo to your local workstation Create a new branch Update list.yml to include your submission entry Optionally run make deps test to validate your entry Push your new branch with the updated list entry to Github Submit your PR for approval","title":"Contribution Guidelines"},{"location":"CONTRIBUTING/#development","text":"In addition to the PR process above you can also setup this repo\u2019s local development environment. This assumes you have Python3, make, and are using a Linux/Mac/WSL environment. Setup the local virtual environment by running make deps Build and preview the generated website with make serve (http://localhost:8000 by default) You can view additional tasks by running make without any arguments.","title":"Development"},{"location":"CONTRIBUTING/#updating-your-pr","text":"If the maintainers notice anything that we\u2019d like changed, we\u2019ll ask you to edit your PR before we merge it. There\u2019s no need to open a new PR, just edit the existing one. If you\u2019re not sure how to do that, here is a guide on the different ways you can update your PR so that we can merge it.","title":"Updating your PR"},{"location":"img/declarative-diagram/","text":"graph LR Manifest[Declarative Manifest (DSL)] Engine[[Declarative Engine]] State[Desired State] Manifest-->|Processed via|Engine Engine-->|Produces|State","title":"Declarative diagram"}]}